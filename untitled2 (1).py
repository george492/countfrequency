# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aEa_Bymvi2mY29J-FUDjBhE4p4TBGvAm
"""

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import plotly.graph_objects as go
from sklearn import datasets
import os
import sys
import pickle

projectabspathname = os.path.abspath('projectname.pickle')
print(projectabspathname)
projectname = 'Copy_of_Copy_of_Project_Template.ipynb'
projectpickle = open(str(projectabspathname),'wb')
pickle.dump(projectname, projectpickle)
projectpickle.close()

from flask import Flask, request, jsonify
import pickle
import numpy as np

# Load the model
model = pickle.load(open('projectname.pickle', 'rb'))

app = Flask(__name__)

@app.route('/predict', methods=['POST'])
def predict():
    # Get data from POST request
    data = request.get_json(force=True)

    # Make sure all required fields are provided
    required_fields = ['gender', 'age', 'hypertension', 'heart_disease', 'marriage_status', 'bmi', 'glucose_level']
    for field in required_fields:
        if field not in data:
            return jsonify({'error': 'Missing field: ' + field}), 400

    # Convert data into numpy array for prediction
    np_data = np.array([[
        data['gender'],
        data['age'],
        data['hypertension'],
        data['heart_disease'],
        data['marriage_status'],
        data['bmi'],
        data['glucose_level']
    ]])

    # Make prediction
    prediction = model.predict(np_data)

    # Return prediction
    if prediction[0] == 0:
        return jsonify({'stroke': 'No'})
    else:
        return jsonify({'stroke': 'Yes'})

if __name__ == '__main__':
    try:
        app.run(port=5000, debug=True)
    except Exception as e:
        print("Error occurred: ", e)

